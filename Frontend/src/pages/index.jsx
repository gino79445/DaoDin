import Head from "next/head";
import { useRouter } from "next/router";

import Topbar from "@/components/Topbar";
import Group from "@/components/Group";
import styles from "../styles/font.module.scss";
import groupsMockData from "@/data/groupsMockData";
import { getServerCookie } from "../utils/cookie";

export default function Home() {
  const router = useRouter();
  const path = router.pathname;

  return (
    <>
      <Head>
        <title>DaoDin</title>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta httpEquiv="X-UA-Compatible" content="ie=edge" />
        <meta name="description" content="Generated by create next app" />
      </Head>
      <Topbar />
      <main className="min-h-screen px-44 pt-8 bg-backgroundColor">
        <div className="mb-8 flex gap-7">
          <button
            type="button"
            className={`${styles.content} w-32 px-7 py-2 bg-primaryColor text-xl font-bold text-white rounded-[50px]`}
          >
            Filter
          </button>
          <button
            type="button"
            className={`${styles.content} w-32 px-7 py-2 bg-primaryColor text-xl font-bold text-white rounded-[50px]`}
          >
            Sortby
          </button>
        </div>
        <div className="min-h-screen px-16 pt-5 bg-white rounded-t-[20px]">
          {groupsMockData.map((group) => (
            <Group
              path={path}
              key={group.id}
              groupId={group.id}
              name={group.name}
              category={group.category}
              location={group.location}
              description={group.description}
              status={group.status}
            />
          ))}
        </div>
      </main>
    </>
  );
}

export async function getServerSideProps(context) {
  const token = getServerCookie("userInfo", "token", context.req);
  const userId = getServerCookie("userInfo", "user_id", context.req);
  const name = getServerCookie("userInfo", "name", context.req);

  if (!token) {
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }

  return {
    props: { token, userId, name },
  };
}
